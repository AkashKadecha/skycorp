{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-sky-lite/src/templates/filterPostByTag.js"],"names":["useStyles","makeStyles","cardActions","justifyContent","Posts","posts","pathPrefix","classes","container","spacing","map","node","excerpt","fileAbsolutePath","frontmatter","id","title","featuredImage","postDate","path","basename","split","splice","join","item","xs","sm","key","fluid","childImageSharp","style","borderRadius","gutterBottom","variant","component","moment","format","color","root","Link","to","IndexPage","data","site","siteMetadata","templates","allMdx","edges","tag","pageContext","flexGrow","width","maxWidth","marginX","padding","textAlign","marginBottom","fontWeight","fontFamily","pageQuery"],"mappings":"kXAkBMA,EAAYC,aAAW,iBAAO,CAClCC,YAAa,CACXC,eAAgB,gBAIdC,EAAQ,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAChBC,EAAUP,IAEhB,OACE,kBAAC,IAAD,CAAMQ,WAAS,EAACC,QAAS,GACtBJ,EAAMK,KACL,YAMO,IAAD,IALJC,KACEC,EAIE,EAJFA,QACAC,EAGE,EAHFA,iBAGE,IAFFC,YAAeC,EAEb,EAFaA,GAAIC,EAEjB,EAFiBA,MAAOC,EAExB,EAFwBA,cAGtBC,EAAWC,IACdC,SAASP,GACTQ,MAAM,KACNC,OAAO,EAAG,GACVC,KAAK,KACR,OACE,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,IAAKZ,GAC7B,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEa,MAAOX,EAAcY,gBAAgBD,MACrCE,MAAO,CAAEC,aAAc,KAEzB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC7ClB,GAEH,kBAAC,IAAD,CAAYiB,QAAQ,WACjBE,IAAOjB,GAAUkB,OAAO,OAE3B,kBAAC,IAAD,CACEH,QAAQ,QACRI,MAAM,gBACNH,UAAU,KAETtB,IAGL,kBAAC,IAAD,CAAaL,QAAS,CAAE+B,KAAM/B,EAAQL,cACpC,kBAAC,IAAD,CACEgC,UAAWK,OACXC,GAAOlC,EAAL,IAAmBS,EACrBkB,QAAQ,YACRI,MAAM,aAJR,qBA0DHI,UAxCG,SAAC,GAYZ,IAAD,IAXJC,KAIiBpC,EAOb,EAVFqC,KACEC,aACEC,UACExC,MAASC,WAIED,EAGf,EAHFyC,OAAUC,MAEGC,EACX,EADJC,YAAeD,IAEf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKE,SAAU,EAAGC,MAAM,OAAOC,SAAU,IAAKC,QAAQ,QACpD,kBAAC,IAAD,CAAKC,QAAS,GACZ,kBAAC,IAAD,CAAKC,UAAU,SAASD,QAAS,GAC/B,kBAAC,IAAD,CAAKE,aAAc,GACjB,kBAAC,IAAD,CACEnB,MAAM,UACNJ,QAAQ,KACRH,MAAO,CACL2B,WAAY,OACZC,WAAY,YACZF,aAAc,IAGfR,IAGL,kBAAC,IAAD,CAASf,QAAQ,YAEnB,kBAAC7B,EAAD,CAAOC,MAAOA,EAAOC,WAAYA,QASpC,IAAMqD,EAAS","file":"component---node-modules-gatsby-theme-sky-lite-src-templates-filter-post-by-tag-js-06314b7283615cc01b0a.js","sourcesContent":["import React from \"react\";\nimport path from \"path\";\nimport { Link, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport Layout from \"../components/Layout\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Divider,\n  Grid,\n  Typography\n} from \"@material-ui/core\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(() => ({\n  cardActions: {\n    justifyContent: \"flex-end\"\n  }\n}));\n\nconst Posts = ({ posts, pathPrefix }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2}>\n      {posts.map(\n        ({\n          node: {\n            excerpt,\n            fileAbsolutePath,\n            frontmatter: { id, title, featuredImage }\n          }\n        }) => {\n          const postDate = path\n            .basename(fileAbsolutePath)\n            .split(\"-\")\n            .splice(0, 3)\n            .join(\"-\");\n          return (\n            <Grid item xs={12} sm={4} key={id}>\n              <Card>\n                <Img\n                  fluid={featuredImage.childImageSharp.fluid}\n                  style={{ borderRadius: 2 }}\n                />\n                <CardContent>\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    {title}\n                  </Typography>\n                  <Typography variant=\"caption\">\n                    {moment(postDate).format(\"LL\")}\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    {excerpt}\n                  </Typography>\n                </CardContent>\n                <CardActions classes={{ root: classes.cardActions }}>\n                  <Button\n                    component={Link}\n                    to={`${pathPrefix}/${id}`}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                  >\n                    Read More\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          );\n        }\n      )}\n    </Grid>\n  );\n};\n\nconst IndexPage = ({\n  data: {\n    site: {\n      siteMetadata: {\n        templates: {\n          posts: { pathPrefix }\n        }\n      }\n    },\n    allMdx: { edges: posts }\n  },\n  pageContext: { tag }\n}) => {\n  return (\n    <Layout>\n      <Box flexGrow={1} width=\"100%\" maxWidth={960} marginX=\"auto\">\n        <Box padding={2}>\n          <Box textAlign=\"center\" padding={4}>\n            <Box marginBottom={4}>\n              <Typography\n                color=\"primary\"\n                variant=\"h3\"\n                style={{\n                  fontWeight: \"bold\",\n                  fontFamily: \"Work Sans\",\n                  marginBottom: 4\n                }}\n              >\n                {tag}\n              </Typography>\n            </Box>\n            <Divider variant=\"middle\" />\n          </Box>\n          <Posts posts={posts} pathPrefix={pathPrefix} />\n        </Box>\n      </Box>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query($tag: String!, $limit: Int!) {\n    site {\n      siteMetadata {\n        templates {\n          posts {\n            pathPrefix\n          }\n        }\n      }\n    }\n    allMdx(\n      filter: {\n        fileAbsolutePath: { regex: \"/content/posts/\" }\n        frontmatter: { tags: { in: [$tag] } }\n      }\n      sort: { order: DESC, fields: [fileAbsolutePath] }\n      limit: $limit\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          fileAbsolutePath\n          frontmatter {\n            id\n            title\n            featuredImage {\n              childImageSharp {\n                fluid(maxWidth: 720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}