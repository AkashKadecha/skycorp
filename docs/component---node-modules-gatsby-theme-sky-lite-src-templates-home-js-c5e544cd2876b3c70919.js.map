{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-sky-lite/src/templates/home.js"],"names":["useStyles","makeStyles","cardActions","justifyContent","Posts","posts","pathPrefix","classes","container","spacing","map","node","excerpt","fileAbsolutePath","frontmatter","id","title","featuredImage","postDate","path","basename","split","splice","join","item","xs","sm","key","fluid","childImageSharp","style","borderRadius","textAlign","gutterBottom","variant","component","marginBottom","moment","format","marginY","light","color","fontFamily","root","Link","to","IndexPage","data","site","siteMetadata","description","templates","allMdx","edges","flexGrow","width","maxWidth","marginX","padding","fontWeight","pageQuery"],"mappings":"kXAkBMA,EAAYC,aAAW,iBAAO,CAClCC,YAAa,CACXC,eAAgB,gBAIdC,EAAQ,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAChBC,EAAUP,IAEhB,OACE,kBAAC,IAAD,CAAMQ,WAAS,EAACC,QAAS,GACtBJ,EAAMK,KACL,YAMO,IAAD,IALJC,KACEC,EAIE,EAJFA,QACAC,EAGE,EAHFA,iBAGE,IAFFC,YAAeC,EAEb,EAFaA,GAAIC,EAEjB,EAFiBA,MAAOC,EAExB,EAFwBA,cAGtBC,EAAWC,IACdC,SAASP,GACTQ,MAAM,KACNC,OAAO,EAAG,GACVC,KAAK,KACR,OACE,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,IAAKZ,GAC7B,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEa,MAAOX,EAAcY,gBAAgBD,MACrCE,MAAO,CAAEC,aAAc,KAEzB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,UAAU,UACb,kBAAC,IAAD,CACEC,cAAY,EACZC,QAAQ,KACRC,UAAU,KACVL,MAAO,CAAEM,aAAc,IAEtBpB,GAEH,kBAAC,IAAD,CAAYkB,QAAQ,WACjBG,IAAOnB,GAAUoB,OAAO,QAG7B,kBAAC,IAAD,CAAKC,QAAS,KACZ,kBAAC,IAAD,CAASC,OAAK,KAEhB,kBAAC,IAAD,CACEN,QAAQ,QACRO,MAAM,gBACNN,UAAU,IACVL,MAAO,CAAEY,WAAY,iBAEpB9B,IAGL,kBAAC,IAAD,CAAaL,QAAS,CAAEoC,KAAMpC,EAAQL,cACpC,kBAAC,IAAD,CACEiC,UAAWS,OACXC,GAAOvC,EAAL,IAAmBS,EACrBmB,QAAQ,YACRO,MAAM,aAJR,qBA8DHK,UA5CG,SAAC,GAaZ,IAAD,IAZJC,KAYI,IAXFC,KACEC,aACEjC,EASF,EATEA,MACAkC,EAQF,EAREA,YAEW5C,EAMb,EAPE6C,UACE9C,MAASC,WAIED,EAEf,EAFF+C,OAAUC,MAGZ,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,SAAU,EAAGC,MAAM,OAAOC,SAAU,IAAKC,QAAQ,QACpD,kBAAC,IAAD,CAAKC,QAAS,GACZ,kBAAC,IAAD,CAAK1B,UAAU,SAAS0B,QAAS,GAC/B,kBAAC,IAAD,CAAKtB,aAAc,GACjB,kBAAC,IAAD,CACEK,MAAM,UACNP,QAAQ,KACRJ,MAAO,CACL6B,WAAY,OACZjB,WAAY,YACZN,aAAc,IAGfpB,GAEH,kBAAC,IAAD,CAAYyB,MAAM,gBAAgBP,QAAQ,SACvCgB,IAGL,kBAAC,IAAD,CAAShB,QAAQ,YAEnB,kBAAC9B,EAAD,CAAOC,MAAOA,EAAOC,WAAYA,QASpC,IAAMsD,EAAS","file":"component---node-modules-gatsby-theme-sky-lite-src-templates-home-js-c5e544cd2876b3c70919.js","sourcesContent":["import React from \"react\";\nimport path from \"path\";\nimport { Link, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport Layout from \"../components/Layout\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Divider,\n  Grid,\n  Typography\n} from \"@material-ui/core\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(() => ({\n  cardActions: {\n    justifyContent: \"flex-end\"\n  }\n}));\n\nconst Posts = ({ posts, pathPrefix }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2}>\n      {posts.map(\n        ({\n          node: {\n            excerpt,\n            fileAbsolutePath,\n            frontmatter: { id, title, featuredImage }\n          }\n        }) => {\n          const postDate = path\n            .basename(fileAbsolutePath)\n            .split(\"-\")\n            .splice(0, 3)\n            .join(\"-\");\n          return (\n            <Grid item xs={12} sm={4} key={id}>\n              <Card>\n                <Img\n                  fluid={featuredImage.childImageSharp.fluid}\n                  style={{ borderRadius: 2 }}\n                />\n                <CardContent>\n                  <Box textAlign=\"center\">\n                    <Typography\n                      gutterBottom\n                      variant=\"h5\"\n                      component=\"h2\"\n                      style={{ marginBottom: 0 }}\n                    >\n                      {title}\n                    </Typography>\n                    <Typography variant=\"caption\">\n                      {moment(postDate).format(\"LL\")}\n                    </Typography>\n                  </Box>\n                  <Box marginY={1.5}>\n                    <Divider light />\n                  </Box>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                    style={{ fontFamily: \"Merriweather\" }}\n                  >\n                    {excerpt}\n                  </Typography>\n                </CardContent>\n                <CardActions classes={{ root: classes.cardActions }}>\n                  <Button\n                    component={Link}\n                    to={`${pathPrefix}/${id}`}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                  >\n                    Read More\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          );\n        }\n      )}\n    </Grid>\n  );\n};\n\nconst IndexPage = ({\n  data: {\n    site: {\n      siteMetadata: {\n        title,\n        description,\n        templates: {\n          posts: { pathPrefix }\n        }\n      }\n    },\n    allMdx: { edges: posts }\n  }\n}) => {\n  return (\n    <Layout>\n      <Box flexGrow={1} width=\"100%\" maxWidth={960} marginX=\"auto\">\n        <Box padding={2}>\n          <Box textAlign=\"center\" padding={4}>\n            <Box marginBottom={4}>\n              <Typography\n                color=\"primary\"\n                variant=\"h2\"\n                style={{\n                  fontWeight: \"bold\",\n                  fontFamily: \"Work Sans\",\n                  marginBottom: 4\n                }}\n              >\n                {title}\n              </Typography>\n              <Typography color=\"textSecondary\" variant=\"body1\">\n                {description}\n              </Typography>\n            </Box>\n            <Divider variant=\"middle\" />\n          </Box>\n          <Posts posts={posts} pathPrefix={pathPrefix} />\n        </Box>\n      </Box>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query($limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        description\n        templates {\n          posts {\n            pathPrefix\n          }\n        }\n      }\n    }\n    allMdx(\n      filter: { fileAbsolutePath: { regex: \"/content/posts/\" } }\n      sort: { order: DESC, fields: [fileAbsolutePath] }\n      limit: $limit\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          fileAbsolutePath\n          frontmatter {\n            id\n            title\n            featuredImage {\n              childImageSharp {\n                fluid(maxWidth: 720) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}